use eframe::egui;

#[derive(Default)]
struct BlackjackApp {
    player_hand: Vec<u8>,
    dealer_card: u8,
    suggestion: Option<String>,
}

impl eframe::App for BlackjackApp {
    fn update(&mut self, ctx: &egui::Context, _frame: &mut eframe::Frame) {
        egui::CentralPanel::default().show(ctx, |ui| {
            ui.heading("🃏 Blackjack Helper");

            if self.player_hand.is_empty() {
                if ui.button("🆕 Deal").clicked() {
                    self.player_hand = vec![10, 6]; // sample hand
                    self.dealer_card = 9;
                    self.suggestion = None;
                }
            } else {
                let total: u8 = self.player_hand.iter().sum();
                ui.label(format!(
                    "Player Hand: {} + {} = {}",
                    self.player_hand[0],
                    self.player_hand[1],
                    total
                ));
                ui.label(format!("Dealer Shows: {}", self.dealer_card));

                if ui.button("💡 Suggest Move").clicked() {
                    self.suggestion = Some(suggest_move(total, self.dealer_card).to_string());
                }

                if let Some(s) = &self.suggestion {
                    ui.label(format!("✅ Suggested Move: {}", s));
                }

                if ui.button("🔁 Reset").clicked() {
                    *self = Self::default();
                }
            }
        });
    }
}

fn suggest_move(player_total: u8, dealer_card: u8) -> &'static str {
    if player_total >= 17 {
        "Stand"
    } else if player_total <= 11 {
        "Hit"
    } else if player_total >= 12 && player_total <= 16 {
        if dealer_card >= 7 {
            "Hit"
        } else {
            "Stand"
        }
    } else {
        "Stand"
    }
}

fn main() -> Result<(), eframe::Error> {
    let options = eframe::NativeOptions {
        viewport: egui::ViewportBuilder::default()
            .with_inner_size([400.0, 250.0])
            .into(),
        ..Default::default()
    };

    eframe::run_native(
        "Blackjack Helper",
        options,
        Box::new(|_cc| Box::<BlackjackApp>::default()),
    )
}

